{
  "openapi": "3.0.0",
  "info": {
    "title": "Booking System API",
    "version": "1.0.0",
    "description": "API documentation for the booking system"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local server"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Register a new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["name", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Error registering user"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Login user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "400": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users/me": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update current user",
        "description": "Update the current user's email or name. The user ID is extracted from the token.",
        "security": [
          { "bearerAuth": [] }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "New name of the user" },
                  "email": { "type": "string", "description": "New email of the user" }
                },
                "example": {
                  "name": "Updated Name",
                  "email": "updated@example.com"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User updated successfully" },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string", "description": "User ID" },
                        "name": { "type": "string", "description": "User's updated name" },
                        "email": { "type": "string", "description": "User's updated email address" },
                        "role": { "type": "string", "description": "User's role (e.g., admin, user)" }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Example response",
                    "value": {
                      "message": "User updated successfully",
                      "user": {
                        "id": "64b1f0c1d85e4d1234567890",
                        "name": "Updated Name",
                        "email": "updated@example.com",
                        "role": "user"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., nothing to update)",
            "content": {
              "application/json": {
                "example": {
                  "message": "Nothing to update"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "example": {
                  "message": "User not found"
                }
              }
            }
          },
          "500": {
            "description": "Error updating user",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error updating user",
                  "error": "Detailed error message here"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Users"],
        "summary": "Get current user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Current user data"
          },
          "401": {
            "description": "Access denied"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users (admin only)",
        "description": "Retrieve a list of all users. This endpoint is accessible only by admin users.",
        "security": [
          { "bearerAuth": [] }
        ],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string", "description": "User ID" },
                      "name": { "type": "string", "description": "User's name" },
                      "email": { "type": "string", "description": "User's email address" },
                      "role": { "type": "string", "description": "User's role (e.g., admin, user)" }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Example response",
                    "value": [
                      {
                        "id": "64b1f0c1d85e4d1234567890",
                        "name": "Admin User",
                        "email": "admin@example.com",
                        "role": "admin"
                      },
                      {
                        "id": "64b1f0c1d85e4d1234567891",
                        "name": "Regular User",
                        "email": "user@example.com",
                        "role": "user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied - only admins can access this endpoint",
            "content": {
              "application/json": {
                "example": {
                  "message": "Access denied"
                }
              }
            }
          },
          "500": {
            "description": "Error fetching users",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error fetching users",
                  "error": "Detailed error message here"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user (admin only)",
        "description": "Delete a user by their ID. Only accessible by admin users.",
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User deleted successfully" },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string", "description": "User ID" },
                        "name": { "type": "string", "description": "User's name" },
                        "email": { "type": "string", "description": "User's email address" },
                        "role": { "type": "string", "description": "User's role (e.g., admin, user)" }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Example response",
                    "value": {
                      "message": "User deleted successfully",
                      "user": {
                        "id": "64b1f0c1d85e4d1234567890",
                        "name": "Regular User",
                        "email": "user@example.com",
                        "role": "user"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied - only admins can access this endpoint",
            "content": {
              "application/json": {
                "example": {
                  "message": "Access denied"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "example": {
                  "message": "User not found"
                }
              }
            }
          },
          "500": {
            "description": "Error deleting user",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error deleting user",
                  "error": "Detailed error message here"
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get all locations",
        "responses": {
          "200": {
            "description": "List of locations"
          },
          "500": {
            "description": "Error fetching locations"
          }
        }
      },
      "post": {
        "tags": ["Locations"],
        "summary": "Add a new location (admin only)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "capacity": { "type": "integer" },
                  "price_per_booking": { "type": "number" }
                },
                "required": ["name", "description", "capacity", "price_per_booking"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "400": {
            "description": "Error creating location"
          }
        }
      }
    },
    "/locations/{id}": {
      "put": {
        "tags": ["Locations"],
        "summary": "Update a location (admin only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Location ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "capacity": { "type": "integer" },
                  "price_per_booking": { "type": "number" }
                },
                "required": ["name", "description", "capacity", "price_per_booking"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "400": {
            "description": "Error updating location"
          },
          "404": {
            "description": "Location not found"
          }
        }
      },
      "delete": {
        "tags": ["Locations"],
        "summary": "Delete a location (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Location ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Location deleted successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "400": {
            "description": "Error deleting location"
          },
          "404": {
            "description": "Location not found"
          }
        }
      }
    },
    "/bookings": {
      "post": {
        "tags": ["Bookings"],
        "summary": "Create a booking",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location_id": { "type": "string" },
                  "date": { "type": "string" },
                  "time": { "type": "string" }
                },
                "required": ["location_id", "date", "time"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully"
          },
          "400": {
            "description": "Error creating booking"
          }
        }
      },
      "get": {
        "tags": ["Bookings"],
        "summary": "Get user bookings",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of user bookings"
          },
          "401": {
            "description": "Access denied"
          }
        }
      }
    },
    "/bookings/all": {
      "get": {
        "tags": ["Bookings"],
        "summary": "Get all bookings (admin only)",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of all bookings"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/bookings/{id}": {
      "patch": {
        "tags": ["Bookings"],
        "summary": "Update a booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Booking ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": { "type": "string" },
                  "time": { "type": "string" },
                  "status": { "type": "string", "enum": ["confirmed", "canceled"] }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking updated successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "400": {
            "description": "Error updating booking"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      },
      "delete": {
        "tags": ["Bookings"],
        "summary": "Cancel a booking",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Booking ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking canceled successfully"
          },
          "401": {
            "description": "Access denied"
          },
          "500": {
            "description": "Error canceling booking"
          }
        }
      }
    },

    "/bookings/available-slots": {
      "get": {
        "tags": ["Bookings"],
        "summary": "Get available booking slots",
        "description": "Retrieve available booking slots for a specific location and date. Slots are calculated based on existing bookings and location capacity.",
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-12-15"
            },
            "description": "The date for which to retrieve available slots (format: YYYY-MM-DD)."
          },
          {
            "name": "location_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "64b1f0c1d85e4d1234567890"
            },
            "description": "The ID of the location for which to retrieve available slots."
          }
        ],
        "responses": {
          "200": {
            "description": "List of available booking slots.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "type": "string",
                      "format": "date",
                      "description": "The date for which slots were calculated."
                    },
                    "location_id": {
                      "type": "string",
                      "description": "The ID of the location."
                    },
                    "availableSlots": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "09:00"
                      },
                      "description": "Array of available time slots in 1-hour increments."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Example response",
                    "value": {
                      "date": "2024-12-15",
                      "location_id": "64b1f0c1d85e4d1234567890",
                      "availableSlots": ["09:00", "11:00", "13:00", "15:00"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request, such as missing date or location_id.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Date and location_id are required"
                }
              }
            }
          },
          "404": {
            "description": "Location not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Location not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Error fetching available slots",
                  "error": "Detailed error message"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
